name: Build and Deploy to production server

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

jobs:
  lint_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: backend
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: false
      - name: Lint code
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
          args: --timeout=5m

  lint_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: frontend
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Lint code
        run: npm run lint
        
  build_frontend:
    needs: [lint_frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build and Publish to Github Container Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          VITE_API_URL: http://projectly.ru
          NUXT_PUBLIC_SITE_URL: projectly.ru
        with:
          name: neketli/projectly-frontend
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: ./frontend/Dockerfile
          context: ./frontend
          tags: latest
          buildargs: VITE_API_URL,NUXT_PUBLIC_SITE_URL

  build_backend:
    needs: [lint_backend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build and Publish to Github Container Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: neketli/projectly-backend
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: ./backend/Dockerfile
          context: ./backend
          tags: latest

  deploy:
    needs: [build_frontend, build_backend]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on VPS
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.HOST_NAME }}
          username: ${{ secrets.HOST_USER }}
          password: ${{ secrets.HOST_PASSWORD }}
          key: ${{ secrets.HOST_KEY }}
          envs: GITHUB_TOKEN
          script: |
            cd /opt/projectly
            git pull origin main
            docker compose up --pull=always --quiet-pull --build --force-recreate -d
            docker system prune -f
